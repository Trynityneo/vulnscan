"use client";

import { useState } from 'react';
import DashboardLayout from '@/components/layout/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Shield, Play, AlertTriangle, Info, AlertCircle } from 'lucide-react';

interface Vulnerability {
  cveId: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  title: string;
  description: string;
  port?: number;
  service?: string;
  score: number;
}

export default function VulnerabilityScanPage() {
  const [target, setTarget] = useState('');
  const [scanning, setScanning] = useState(false);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);

  console.log("VulnerabilityScan page rendered");

  const mockVulnerabilities: Vulnerability[] = [
    {
      cveId: 'CVE-2023-12345',
      severity: 'critical',
      title: 'SQL Injection in Web Application',
      description: 'The application is vulnerable to SQL injection attacks through user input fields.',
      port: 80,
      service: 'HTTP',
      score: 9.8
    },
    {
      cveId: 'CVE-2023-54321',
      severity: 'high',
      title: 'Outdated SSH Version',
      description: 'SSH server version is outdated and contains known security vulnerabilities.',
      port: 22,
      service: 'SSH',
      score: 7.4
    },
    {
      cveId: 'CVE-2023-98765',
      severity: 'medium',
      title: 'Information Disclosure',
      description: 'Server headers reveal unnecessary information about the system.',
      port: 443,
      service: 'HTTPS',
      score: 5.3
    },
    {
      cveId: 'CVE-2023-11111',
      severity: 'low',
      title: 'Missing Security Headers',
      description: 'Web application is missing important security headers.',
      port: 80,
      service: 'HTTP',
      score: 3.1
    }
  ];

  const handleScan = async () => {
    console.log("Starting vulnerability scan for:", target);
    setScanning(true);
    setVulnerabilities([]);

    // Simulate scanning delay
    setTimeout(() => {
      setVulnerabilities(mockVulnerabilities);
      setScanning(false);
      console.log("Vulnerability scan completed with", mockVulnerabilities.length, "findings");
    }, 4000);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-cyber-red text-white border-cyber-red';
      case 'high': return 'bg-red-600/90 text-white border-red-600';
      case 'medium': return 'bg-cyber-amber/90 text-cyber-bg border-cyber-amber';
      case 'low': return 'bg-cyber-green/90 text-cyber-bg border-cyber-green';
      case 'info': return 'bg-cyber-blue/90 text-cyber-bg border-cyber-blue';
      default: return 'bg-cyber-blue/20 text-cyber-blue border-cyber-blue/30';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical':
      case 'high':
        return <AlertTriangle className="h-4 w-4" />;
      case 'medium':
        return <AlertCircle className="h-4 w-4" />;
      default:
        return <Info className="h-4 w-4" />;
    }
  };

  return (
    <DashboardLayout>
      <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center space-x-2">
        <Shield className="h-6 w-6 text-cyber-blue" />
        <h1 className="text-2xl font-bold text-cyber-text glow-text">Vulnerability Scanner</h1>
      </div>

      {/* Scan Configuration */}
      <Card className="cyber-card">
        <CardHeader>
          <CardTitle className="text-cyber-text flex items-center space-x-2">
            <AlertTriangle className="h-5 w-5 text-cyber-red" />
            <span>Security Assessment</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="target" className="text-cyber-text">Target IP/Domain</Label>
              <Input
                id="target"
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder="192.168.1.1 or example.com"
                className="cyber-input"
              />
            </div>

            <div className="mt-6">
              <Button
                onClick={handleScan}
                disabled={!target || scanning}
                className="cyber-button"
              >
                {scanning ? (
                  <div className="flex items-center space-x-2">
                    <div className="w-4 h-4 border-2 border-cyber-bg border-t-transparent rounded-full animate-spin"></div>
                    <span>Scanning for vulnerabilities...</span>
                  </div>
                ) : (
                  <div className="flex items-center space-x-2">
                    <Play className="h-4 w-4" />
                    <span>Start Vulnerability Scan</span>
                  </div>
                )}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Scan Progress */}
      {scanning && (
        <Card className="cyber-card scan-animation">
          <CardContent className="p-6">
            <div className="flex items-center space-x-4">
              <div className="animate-pulse-glow">
                <Shield className="h-8 w-8 text-cyber-red" />
              </div>
              <div>
                <h3 className="text-lg font-medium text-cyber-text">Analyzing {target}</h3>
                <p className="text-cyber-muted">Checking for known vulnerabilities...</p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Results Summary */}
      {vulnerabilities.length > 0 && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {['critical', 'high', 'medium', 'low'].map(severity => {
            const count = vulnerabilities.filter(v => v.severity === severity).length;
            return (
              <Card key={severity} className="cyber-card">
                <CardContent className="p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="text-sm text-cyber-muted capitalize">{severity}</p>
                      <p className={`text-2xl font-bold ${
                        severity === 'critical' ? 'text-cyber-red' :
                        severity === 'high' ? 'text-red-600' :
                        severity === 'medium' ? 'text-cyber-amber' :
                        'text-cyber-green'
                      }`}>
                        {count}
                      </p>
                    </div>
                    {getSeverityIcon(severity)}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}

      {/* Vulnerability Details */}
      {vulnerabilities.length > 0 && (
        <Card className="cyber-card">
          <CardHeader>
            <CardTitle className="text-cyber-text">Vulnerability Details</CardTitle>
            <p className="text-sm text-cyber-muted">Found {vulnerabilities.length} security issues</p>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {vulnerabilities.map((vuln, index) => (
                <div key={index} className="border border-cyber-blue/20 rounded-lg p-4 space-y-3">
                  <div className="flex items-start justify-between">
                    <div className="space-y-1">
                      <div className="flex items-center space-x-2">
                        <Badge variant="outline" className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <span className="font-mono text-sm text-cyber-muted">{vuln.cveId}</span>
                        <span className="text-sm text-cyber-amber">Score: {vuln.score}</span>
                      </div>
                      <h3 className="font-medium text-cyber-text">{vuln.title}</h3>
                    </div>
                  </div>
                  
                  <p className="text-sm text-cyber-muted">{vuln.description}</p>
                  
                  {vuln.port && vuln.service && (
                    <div className="flex items-center space-x-4 text-xs text-cyber-muted">
                      <span>Port: {vuln.port}</span>
                      <span>Service: {vuln.service}</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
      </div>
    </DashboardLayout>
  );
}